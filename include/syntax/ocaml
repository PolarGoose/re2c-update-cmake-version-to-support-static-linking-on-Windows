// supported feature lists -----------------------------------------------------

supported_apis = ["record", "generic"];
supported_api_styles = ["free-form"];
supported_code_models = ["recursive-functions"];
supported_targets = ["code", "dot"];
supported_features = ["nested-ifs", "bitmaps", "case-ranges",
    "tags", "captures", "captvars"];


// language-specific options ---------------------------------------------------

semicolons = 0;
backtick_quoted_strings = 0;
single_quoted_strings = 0;
indentation_sensitive = 0;
wrap_blocks_in_braces = 0;


// immutable configurations (command-line only options) ------------------------

conf:target = code;
conf:code-model = recursive-functions;
conf:input-encoding = ascii;
conf:date = 1;
conf:version = 1;
conf:conditions = 0;
conf:storable-state = 0;
conf:flex-syntax = 0;
conf:verbose = 0;
conf:line-dirs = 1;


// mutable configurations ------------------------------------------------------

conf:api = record;
conf:api:style = free-form;
conf:api:sigil = "@@";
conf:define:YYGETCOND:naked = 0;
conf:define:YYSETCOND:naked = 0;
conf:define:YYSETCOND@cond = "@@";
conf:define:YYGETSTATE:naked = 0;
conf:define:YYSETSTATE:naked = 0;
conf:define:YYSETSTATE@state = "@@";
conf:define:YYFILL@len = "@@";
conf:define:YYFILL:naked = 0;
conf:define:YYFN = ["<undefined-function-name>;<undefined-function-type>"];
conf:yyfn:sep = ";";
conf:variable:yycond = "yycond";
conf:variable:yyctable = "yyctable";
conf:variable:yyaccept = "yyaccept";
conf:variable:yytarget = "yytarget";
conf:variable:yystate = "yystate";
conf:variable:yynmatch = "yynmatch";
conf:variable:yypmatch = "yypmatch";
conf:variable:yyrecord = "yyrecord";
conf:variable:yych = "yych";
conf:variable:yych:conversion = 0;
conf:variable:yych:literals = char;
conf:variable:yych:emit = (code_model.recursive_functions ? 0 : 1);
conf:variable:yybm = "yybm";
conf:variable:yybm:hex = 0;
conf:variable:yyfill = "";
conf:variable:yystable = ""; // deprecated
conf:header = "";
conf:eof = -1;
conf:sentinel = -1;
conf:yyfill:enable = 1;
conf:yyfill:parameter = 1;
conf:yyfill:check = 1;
conf:tags = 0;
conf:tags:prefix = "yyt";
conf:captures = 0;
conf:captvars = 0;
conf:posix-captures = 0;
conf:posix-captvars = 0;
conf:invert-captures = 0;
conf:cond:abort = 0; // default case causes [redundant-case] warnings
conf:cond:prefix = "yyc_";
conf:cond:enumprefix = "YYC_";
conf:cond:divider@cond = "@@";
conf:cond:goto@cond = "@@";
conf:state:abort = 1;
conf:state:nextlabel = 0;
conf:bit-vectors = 0;
conf:debug-output = 0;
conf:computed-gotos = 0;
conf:computed-gotos:threshold = 9;
conf:nested-ifs = 0;
conf:case-insensitive = 0;
conf:case-inverted = 0;
conf:case-ranges = 1;
conf:unsafe = 0;
conf:monadic = 0;
conf:encoding:ebcdic = 0;
conf:encoding:utf32 = 0;
conf:encoding:ucs2 = 0;
conf:encoding:utf16 = 0;
conf:encoding:utf8 = 0;
conf:encoding-policy = ignore;
conf:empty-class = match-empty;
conf:indent:string = "    ";
conf:indent:top = 0;
conf:label:prefix = "yy";
conf:label:yyfill = "yyFillLabel";
conf:label:yyloop = "";
conf:label:yyNext = "yyNext";
conf:label:start = 0;


// mutable code configuration --------------------------------------------------

conf:define:YYBACKUP = "yybackup";
conf:define:YYBACKUPCTX = "yybackupctx";
conf:define:YYCONDTYPE = "yycondtype";
conf:define:YYCOPYMTAG = sigil "{lhs} <- " sigil "{rhs};";
conf:define:YYCOPYSTAG = sigil "{lhs} <- " sigil "{rhs};";
conf:define:YYCTYPE = "char";
conf:define:YYCTXMARKER = (api.record ? yyrecord ".") "yyctxmarker";
conf:define:YYCURSOR = (api.record ? yyrecord ".") "yycursor";
conf:define:YYDEBUG = "yydebug";
conf:define:YYFILL = "yyfill";
conf:define:YYGETACCEPT = sigil "{var}";
conf:define:YYGETCOND = "yygetcond";
conf:define:YYGETSTATE = "yygetstate";
conf:define:YYINPUT = (api.record ? yyrecord ".") "yyinput";
conf:define:YYLESSTHAN = "yylesthan";
conf:define:YYLIMIT = (api.record ? yyrecord ".") "yylimit";
conf:define:YYMARKER = (api.record ? yyrecord ".") "yymarker";
conf:define:YYMAXFILL = "yymaxfill";
conf:define:YYMAXNMATCH = "yymaxnmatch";
conf:define:YYMTAGN = "yymatgn";
conf:define:YYMTAGP = "yymtagp";
conf:define:YYPEEK = (api.record ? "get" : "yypeek");
conf:define:YYRESTORE = "yyrestore";
conf:define:YYRESTORECTX = "yyrestorectx";
conf:define:YYRESTORETAG = "yyrestoretag";
conf:define:YYSETACCEPT = sigil "{var} <- " sigil "{val};";
conf:define:YYSETCOND = "yysetcond";
conf:define:YYSETSTATE = "yysetstate";
conf:define:YYSHIFT = "yyshift";
conf:define:YYSHIFTSTAG = "yyshiftstag";
conf:define:YYSHIFTMTAG = "yyshiftmtag";
conf:define:YYSKIP = "yyskip";
conf:define:YYSTAGN = "yystagn";
conf:define:YYSTAGP = "yystagp";
conf:tags:expression = (api.record ? yyrecord ".") sigil;
conf:tags:negative = (api.generic ? "@@" : "-1");
conf:cond:divider = "";
conf:cond:goto = "";


// code templates --------------------------------------------------------------

code:var_local = topindent "let " name " = " init " in" nl;
code:var_global = topindent "let " name " = " init nl;

code:const_local = topindent "let " name " = " init " in" nl;
code:const_global = topindent "let " name " = " init nl;

code:array_local =
    topindent "and " name " = [|" nl indent
        [row: topindent [elem{0:-2}: elem "; "] [elem{-1}: elem ";"] nl]
    dedent topindent "|]" nl;

code:array_global = code:array_local;

code:array_elem = array ".(" index ")";

code:type_int = "int";
code:type_uint = "uint";
code:type_cond_enum = (storable_state? "int" : "uint");
code:type_yybm = "int";
code:type_yytarget = <undefined>;

code:assign = topindent lhs " <- " rhs ";" nl;

code:cmp_eq = "=="; // physical equality, as this is used to compare primitive values
code:cmp_ne = "!="; // physical inequality, as this is used to compare primitive values
code:cmp_lt = "<";
code:cmp_gt = ">";
code:cmp_le = "<=";
code:cmp_ge = ">=";

code:if_then_else =
    [branch{0}: topindent "if (" cond ") then (" nl
        indent [stmt: stmt] dedent]
    [branch{1:-1}: topindent ") else " (have_cond? "if (" cond ") then ") "(" nl
        indent [stmt: stmt] dedent]
    topindent ")" nl;

code:if_then_else_oneline =
    [branch{0}: topindent "if (" cond ") then " [stmt: stmt] nl]
    [branch{1:-1}: topindent "else " (have_cond? "if (" cond ") then ") [stmt: stmt] nl];

code:switch =
    topindent "match " expr " with" nl
        indent [case: case] dedent;

code:switch_cases =
    [case{0:-2}: topindent "| " case nl]
    [case{-1}:   topindent "| " case " ->" nl
        indent [stmt: stmt] dedent
    ];

code:switch_cases_oneline =
    [case{0:-2}: topindent "| " case nl]
    [case{-1}:   topindent "| " case " -> " [stmt: stmt] nl];

// In OCaml only literals of type `char` support case ranges.
// For `int`, we have to exlicitly list all range values. We cannot use
//     `"c when " [val{0}: val] " <= c && c <= " [val{-1}: val]`
// as it causes error when there are multiple cases:
//     `Error: Variable c must occur on both sides of this | pattern`.
code:switch_case_range = (char_literals
    ? [val{0}: val] (many ? ".." [val{-1}: val])
    : [val{0}: val] [val{1:-1}: "|" val]);

code:switch_case_default = "_";

code:enum =
    "type " name " = "
        [elem{0}:          elem]
        [elem{1:-1}: " | " elem]
    nl;

code:enum_elem = name;

code:loop = <undefined>;

code:goto = <undefined>;

code:fndecl = <undefined>;

code:fndef =
    name [arg: " (" argname " : " argtype ")"] " : " type " =" nl
        indent [stmt: stmt] dedent;

code:fncall =
    topindent (have_retval ? "let " retval " = ")
        "(" name " [@tailcall])" (have_args ? [arg: " " arg] : " ()") nl;

code:tailcall = topindent "(" name " [@tailcall])" (have_args ? [arg: " " arg] : " ()") nl;

code:recursive_functions =
    [fn{0}:    "let rec " fndef nl]
    [fn{1:-1}: "and "     fndef nl];

code:fingerprint =
    "(* Generated by re2ocaml" (have_version? " " version) (have_date? " on " date) " *)" nl;

code:line_info = "#" line " \"" file "\"" nl;

code:abort = topindent "raise (Failure \"internal lexer error\")" nl;

code:yydebug =
    topindent (api.record
        ? YYDEBUG " " yyrecord
        : YYDEBUG
    ) nl;

code:yypeek =
    topindent (api.record
        ? "let " yych " = " YYPEEK " " YYINPUT " " YYCURSOR " in"
        : "let " yych " = " YYPEEK " in"
    ) nl;

code:yyskip =
    topindent (api.record
        ? YYCURSOR " <- " YYCURSOR " + 1;"
        : YYSKIP
    ) nl;

code:yybackup =
    topindent (api.record
        ? YYMARKER " <- " YYCURSOR ";"
        : YYBACKUP
    ) nl;

code:yybackupctx =
    topindent (api.record
        ? YYCTXMARKER " <- " YYCURSOR ";"
        : YYBACKUPCTX
    ) nl;

code:yyskip_yypeek = <undefined>;
code:yypeek_yyskip = <undefined>;
code:yyskip_yybackup = <undefined>;
code:yybackup_yyskip = <undefined>;
code:yybackup_yypeek = <undefined>;
code:yyskip_yybackup_yypeek = <undefined>;
code:yybackup_yypeek_yyskip = <undefined>;

code:yyrestore =
    topindent (api.record
        ? YYCURSOR " <- " YYMARKER ";"
        : YYRESTORE
    ) nl;

code:yyrestorectx =
    topindent (api.record
        ? YYCURSOR " <- " YYCTXMARKER ";"
        : YYRESTORECTX
    ) nl;

code:yyrestoretag =
    topindent (api.record
        ? YYCURSOR " <- " tag ";"
        : YYRESTORETAG
    ) nl;

code:yyshift =
    topindent (api.record
        ? YYCURSOR " <- " YYCURSOR " - " offset ";"
        : YYSHIFT
    ) nl;

code:yyshiftstag =
    topindent (nested ? "if " tag " <> " neg " then ") (api.record
        ? tag " <- " tag " - " offset ";"
        : YYSHIFTSTAG
    ) nl;

code:yyshiftmtag =
    topindent YYSHIFTMTAG nl;

code:yystagp =
    topindent (api.record
        ? tag " <- " YYCURSOR ";"
        : YYSTAGP
    ) nl;

code:yymtagp =
    topindent YYMTAGP nl;

code:yystagn =
    topindent (api.record
        ? tag " <- " neg ";"
        : YYSTAGN
    ) nl;

code:yymtagn =
    topindent YYMTAGN nl;

code:yycopystag =
    topindent (api.record
        ? lhs " <- " rhs ";"
        : YYCOPYSTAG
    ) nl;

code:yycopymtag =
    topindent (api.record
        ? lhs " <- " rhs ";"
        : YYCOPYMTAG
    ) nl;

code:yygetaccept =
    (api.record ? yyrecord "." var : YYGETACCEPT);

code:yysetaccept =
    topindent (api.record
        ? yyrecord "." var " <- " val ";"
        : YYSETACCEPT
    ) nl;

code:yygetcond =
    (api.record ? yyrecord "." var : YYGETCOND);

code:yysetcond =
    topindent (api.record
        ? yyrecord "." var " <- " val ";"
        : YYSETCOND
    ) nl;

code:yygetstate =
    (api.record ? yyrecord "." var : YYGETSTATE);

code:yysetstate =
    topindent (api.record
        ? yyrecord "." var " <- " val ";"
        : YYSETSTATE
    ) nl;

code:yylessthan =
    (api.record
        ? (many
            ? "(" YYLIMIT " - " YYCURSOR ") < " need
            : YYLIMIT " <= " YYCURSOR)
        : YYLESSTHAN);

code:yybm_filter = yych " land ~0xFF";

code:yybm_match = "(" yybm ".(" offset " + Char.code " yych ") land " mask ") != 0";
