// Generated by re2zig
// re2zig $INPUT -o $OUTPUT -s

const std = @import("std");

fn lex(yyinput: [:0]const u8) bool {
    var yycursor: u32 = 0;
    
    var yych: u8 = 0;
    var yystate: u32 = 0;
    while (true) {
        switch (yystate) {
            0 => {
                yych = yyinput[yycursor];
                yycursor += 1;
                if (yych <= 0x30) {
                    yystate = 1;
                    continue;
                }
                if (yych <= 0x39) {
                    yystate = 2;
                    continue;
                }
                yystate = 1;
                continue;
            },
            1 => { return false; },
            2 => {
                yych = yyinput[yycursor];
                if (yych <= 0x2F) {
                    yystate = 3;
                    continue;
                }
                if (yych <= 0x39) {
                    yycursor += 1;
                    yystate = 2;
                    continue;
                }
                yystate = 3;
                continue;
            },
            3 => { return true; },
            else => { @panic("internal lexer error"); },
        }
    }

}

test {
    try std.testing.expect(lex("1234"));
}
